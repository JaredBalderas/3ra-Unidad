## DevNet Always-On Sandbox IP and Port values
DNAC_IP = "sandboxdnac.cisco.com"
DNAC_PORT = 443

DNAC_USER = "devnetuser"
DNAC_PASSWORD = "Cisco123!"
##

## env_lab.py
DNA_CENTER = {
    "host": "sandboxdnac.cisco.com",
    "port" : "443",
    "username": "devnetuser",
    "password": "Cisco123!"
}
##

## get_commands.py

import env_lab
import json
import requests
from requests.auth import HTTPBasicAuth
import urllib3

# Disable the SSL warning on the DevNet Sandbox; never do this in production
# https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
urllib3.disable_warnings()


def get_token(host=env_lab.DNA_CENTER['host'],
              username=env_lab.DNA_CENTER['username'],
              password=env_lab.DNA_CENTER['password'],
              port=env_lab.DNA_CENTER['port']):
    """
    Use the REST API to log into an DNA_CENTER and retrieve a token
    """
    url = "https://{}:{}/dna/system/api/v1/auth/token".format(host,port)
    # Make Login request and return the response body
    response = requests.request("POST", url, auth=HTTPBasicAuth(username, password), verify=False)
    token = response.json()["Token"]
    return token

def get_commands(token, host=env_lab.DNA_CENTER['host'], port=env_lab.DNA_CENTER['port']):
    url = "https://{}:{}/api/v1/network-device-poller/cli/legit-reads".format(host,port)
    headers = {
        "X-Auth-Token": token
        }
    response = requests.get(url, headers=headers, verify=False)
    response.raise_for_status()
    print("Exec commands supported:")
    print(json.dumps(response.json()['response'], indent=4))


if __name__ == '__main__':
    
    get_commands(get_token())

    ##

## get_device_interfaces.py
import requests
from requests.auth import HTTPBasicAuth
from dnac_config import DNAC_IP, DNAC_PORT, DNAC_USER, DNAC_PASSWORD

def get_device_id(device_json):
    for device in device_json['response']: 
        print("Fetching Interfaces for Device Id ----> {}".format(device['id']))
        print('\n')
        get_device_int(device['id'])
        print('\n')

        def get_device_int(device_id):
    """
    Building out function to retrieve device interface. Using requests.get
    to make a call to the network device Endpoint
    """
    url = "https://sandboxdnac.cisco.com/api/v1/interface"
    hdr = {'x-auth-token': token, 'content-type' : 'application/json'}
    querystring = {"macAddress": device_id} 
    resp = requests.get(url, headers=hdr, params=querystring) 
    interface_info_json = resp.json()
    print_interface_info(interface_info_json)

def get_auth_token():
    """
    Building out Auth request. Using requests.post to make a call to the Auth Endpoint
    """
    url = 'https://sandboxdnac.cisco.com/dna/system/api/v1/auth/token'       # Endpoint URL
    resp = requests.post(url, auth=HTTPBasicAuth(DNAC_USER, DNAC_PASSWORD))  # Make the POST Request
    token = resp.json()['Token']    # Retrieve the Token 
    return token    # Create a return statement for the Token

def print_interface_info(interface_info):
    print("{0:42}{1:17}{2:12}{3:18}{4:17}{5:10}{6:15}".
          format("portName", "vlanId", "portMode", "portType", "duplex", "status", "lastUpdated"))
    for int in interface_info['response']:
        print("{0:42}{1:10}{2:12}{3:18}{4:17}{5:10}{6:15}".
              format(str(int['portName']),
                     str(int['vlanId']),
                     str(int['portMode']),
                     str(int['portType']),
                     str(int['duplex']),
                     str(int['status']),
                     str(int['lastUpdated'])))
        
if __name__ == "__main__":
    get_device_list()
    ##

## get_device_list.py


import requests
from requests.auth import HTTPBasicAuth
from dnac_config import DNAC_IP, DNAC_PORT, DNAC_USER, DNAC_PASSWORD

def get_device_list():
    """
    Building out function to retrieve list of devices. Using requests.get to make a call to the network device Endpoint
    """
    token = get_auth_token() # Get Token
    url = "https://sandboxdnac.cisco.com/api/v1/network-device"
    hdr = {'x-auth-token': token, 'content-type' : 'application/json'}
    resp = requests.get(url, headers=hdr, verify=False)  # Make the Get Request
    device_list = resp.json()
    print_device_list(device_list)

    def print_device_list(device_json):
    print("{0:42}{1:17}{2:12}{3:18}{4:12}{5:16}{6:15}".
          format("hostname", "mgmt IP", "serial","platformId", "SW Version", "role", "Uptime"))
    for device in device_json['response']:
        uptime = "N/A" if device['upTime'] is None else device['upTime']
        if device['serialNumber'] is not None and "," in device['serialNumber']:
            serialPlatformList = zip(device['serialNumber'].split(","), device['platformId'].split(","))
        else:
            serialPlatformList = [(device['serialNumber'], device['platformId'])]
        for (serialNumber, platformId) in serialPlatformList:
            print("{0:42}{1:17}{2:12}{3:18}{4:12}{5:16}{6:15}".
                  format(device['hostname'],
                         device['managementIpAddress'],
                         serialNumber,
                         platformId,
                         device['softwareVersion'],
                         device['role'], uptime))
            
    def get_auth_token():
    """
    Building out Auth request. Using requests.post to make a call to the Auth Endpoint
    """
    url = 'https://sandboxdnac.cisco.com/dna/system/api/v1/auth/token'       # Endpoint URL
    resp = requests.post(url, auth=HTTPBasicAuth(DNAC_USER, DNAC_PASSWORD), verify=False)  # Make the POST Request
    token = resp.json()['Token']    # Retrieve the Token 
    return token    # Create a return statement for the Token

if __name__ == "__main__":
    get_device_list()
##

export PS1="\u:\W > "

DNA_CENTER = {
    "host": "sandboxdnac.cisco.com",
    "port" : "443",
    "username": "devnetuser",
    "password": "Cisco123!"
}
import requests
from requests.auth import HTTPBasicAuth
import env_lab

requests.packages.urllib3.disable_warnings()
def get_auth_token():
    # Endpoint URL
    endpoint = '/dna/system/api/v1/auth/token'
    url = 'https://' + env_lab.DNA_CENTER['host'] + endpoint
    # Make the POST Request
    resp = requests.post(url, auth=HTTPBasicAuth(env_lab.DNA_CENTER['username'], env_lab.DNA_CENTER['password']), verify=False)
    # Retrieve the Token from the returned JSON
    token = resp.json()['Token']
    # Print out the Token
    print("Token Retrieved: {}".format(token))
    # Create a return statement to send the token back for later use
    return token
if __name__ == "__main__":
    get_auth_token()

##
